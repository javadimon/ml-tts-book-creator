/*
 * TTS documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.1.73
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.speechpro.cloud.client.api;

import com.google.gson.reflect.TypeToken;
import com.speechpro.cloud.client.*;
import com.speechpro.cloud.client.model.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.*;

public class SynthesizeApi {
    private ApiClient apiClient;

    public SynthesizeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SynthesizeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for languageVoicesSupport
     * @param xSessionId Session identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call languageVoicesSupportCall(String xSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vktts/rest/v1/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call languageVoicesSupportValidateBeforeCall(String xSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling languageVoicesSupport(Async)");
        }


        com.squareup.okhttp.Call call = languageVoicesSupportCall(xSessionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Available languages
     *
     * @param xSessionId Session identifier (required)
     * @return List&lt;SynthesizeLanguage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SynthesizeLanguage> languageVoicesSupport(String xSessionId) throws ApiException {
        ApiResponse<List<SynthesizeLanguage>> resp = languageVoicesSupportWithHttpInfo(xSessionId);
        return resp.getData();
    }

    /**
     * Available languages
     *
     * @param xSessionId Session identifier (required)
     * @return ApiResponse&lt;List&lt;SynthesizeLanguage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SynthesizeLanguage>> languageVoicesSupportWithHttpInfo(String xSessionId) throws ApiException {
        com.squareup.okhttp.Call call = languageVoicesSupportValidateBeforeCall(xSessionId, null, null);
        Type localVarReturnType = new TypeToken<List<SynthesizeLanguage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Available languages (asynchronously)
     *
     * @param xSessionId Session identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call languageVoicesSupportAsync(String xSessionId, final ApiCallback<List<SynthesizeLanguage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = languageVoicesSupportValidateBeforeCall(xSessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SynthesizeLanguage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for synthesize
     * @param xSessionId Session identifier (required)
     * @param body Synthesize param (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call synthesizeCall(String xSessionId, SynthesizeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vktts/rest/v1/synthesize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call synthesizeValidateBeforeCall(String xSessionId, SynthesizeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling synthesize(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling synthesize(Async)");
        }


        com.squareup.okhttp.Call call = synthesizeCall(xSessionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Synthesize speech from text
     *
     * @param xSessionId Session identifier (required)
     * @param body Synthesize param (required)
     * @return SynthesizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SynthesizeResponse synthesize(String xSessionId, SynthesizeRequest body) throws ApiException {
        ApiResponse<SynthesizeResponse> resp = synthesizeWithHttpInfo(xSessionId, body);
        return resp.getData();
    }

    /**
     * Synthesize speech from text
     *
     * @param xSessionId Session identifier (required)
     * @param body Synthesize param (required)
     * @return ApiResponse&lt;SynthesizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SynthesizeResponse> synthesizeWithHttpInfo(String xSessionId, SynthesizeRequest body) throws ApiException {
        com.squareup.okhttp.Call call = synthesizeValidateBeforeCall(xSessionId, body, null, null);
        Type localVarReturnType = new TypeToken<SynthesizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Synthesize speech from text (asynchronously)
     *
     * @param xSessionId Session identifier (required)
     * @param body Synthesize param (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call synthesizeAsync(String xSessionId, SynthesizeRequest body, final ApiCallback<SynthesizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = synthesizeValidateBeforeCall(xSessionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SynthesizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for synthesizeSessionless
     * @param body Synthesize param (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call synthesizeSessionlessCall(SynthesizeSessionlessRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vktts/rest/v1/synthesize/sessionless";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call synthesizeSessionlessValidateBeforeCall(SynthesizeSessionlessRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling synthesizeSessionless(Async)");
        }


        com.squareup.okhttp.Call call = synthesizeSessionlessCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Synthesize speech from text without session
     *
     * @param body Synthesize param (required)
     * @return SynthesizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SynthesizeResponse synthesizeSessionless(SynthesizeSessionlessRequest body) throws ApiException {
        ApiResponse<SynthesizeResponse> resp = synthesizeSessionlessWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Synthesize speech from text without session
     *
     * @param body Synthesize param (required)
     * @return ApiResponse&lt;SynthesizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SynthesizeResponse> synthesizeSessionlessWithHttpInfo(SynthesizeSessionlessRequest body) throws ApiException {
        com.squareup.okhttp.Call call = synthesizeSessionlessValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<SynthesizeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Synthesize speech from text without session (asynchronously)
     *
     * @param body Synthesize param (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call synthesizeSessionlessAsync(SynthesizeSessionlessRequest body, final ApiCallback<SynthesizeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = synthesizeSessionlessValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SynthesizeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for voices
     * @param xSessionId Session identifier (required)
     * @param language Language name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call voicesCall(UUID xSessionId, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vktts/rest/v1/languages/{language}/voices"
            .replaceAll("\\{" + "language" + "\\}", apiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call voicesValidateBeforeCall(UUID xSessionId, String language, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling voices(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling voices(Async)");
        }


        com.squareup.okhttp.Call call = voicesCall(xSessionId, language, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Available languages
     *
     * @param xSessionId Session identifier (required)
     * @param language Language name (required)
     * @return List&lt;SynthesizeVoiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SynthesizeVoiceType> voices(UUID xSessionId, String language) throws ApiException {
        ApiResponse<List<SynthesizeVoiceType>> resp = voicesWithHttpInfo(xSessionId, language);
        return resp.getData();
    }

    /**
     * Available languages
     *
     * @param xSessionId Session identifier (required)
     * @param language Language name (required)
     * @return ApiResponse&lt;List&lt;SynthesizeVoiceType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SynthesizeVoiceType>> voicesWithHttpInfo(UUID xSessionId, String language) throws ApiException {
        com.squareup.okhttp.Call call = voicesValidateBeforeCall(xSessionId, language, null, null);
        Type localVarReturnType = new TypeToken<List<SynthesizeVoiceType>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Available languages (asynchronously)
     *
     * @param xSessionId Session identifier (required)
     * @param language Language name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call voicesAsync(UUID xSessionId, String language, final ApiCallback<List<SynthesizeVoiceType>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = voicesValidateBeforeCall(xSessionId, language, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SynthesizeVoiceType>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for webSocketStream
     * @param xSessionId Session identifier (required)
     * @param body Synthesize param (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call webSocketStreamCall(UUID xSessionId, WebSocketSynthesizeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vktts/rest/v1/synthesize/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call webSocketStreamValidateBeforeCall(UUID xSessionId, WebSocketSynthesizeRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling webSocketStream(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling webSocketStream(Async)");
        }


        com.squareup.okhttp.Call call = webSocketStreamCall(xSessionId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get websocket connection param
     *
     * @param xSessionId Session identifier (required)
     * @param body Synthesize param (required)
     * @return WebSocketServerConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebSocketServerConfiguration webSocketStream(UUID xSessionId, WebSocketSynthesizeRequest body) throws ApiException {
        ApiResponse<WebSocketServerConfiguration> resp = webSocketStreamWithHttpInfo(xSessionId, body);
        return resp.getData();
    }

    /**
     * Get websocket connection param
     *
     * @param xSessionId Session identifier (required)
     * @param body Synthesize param (required)
     * @return ApiResponse&lt;WebSocketServerConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebSocketServerConfiguration> webSocketStreamWithHttpInfo(UUID xSessionId, WebSocketSynthesizeRequest body) throws ApiException {
        com.squareup.okhttp.Call call = webSocketStreamValidateBeforeCall(xSessionId, body, null, null);
        Type localVarReturnType = new TypeToken<WebSocketServerConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get websocket connection param (asynchronously)
     *
     * @param xSessionId Session identifier (required)
     * @param body Synthesize param (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call webSocketStreamAsync(UUID xSessionId, WebSocketSynthesizeRequest body, final ApiCallback<WebSocketServerConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = webSocketStreamValidateBeforeCall(xSessionId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebSocketServerConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for closeWebSocketStream
     * @param xSessionId Session identifier (required)
     * @param xTransactionId Transaction Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call closeWebSocketStreamCall(UUID xSessionId, UUID xTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vktts/rest/v1/synthesize/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xSessionId != null)
        localVarHeaderParams.put("X-Session-Id", apiClient.parameterToString(xSessionId));
        if (xTransactionId != null)
        localVarHeaderParams.put("X-Transaction-Id", apiClient.parameterToString(xTransactionId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call closeWebSocketStreamValidateBeforeCall(UUID xSessionId, UUID xTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xSessionId' is set
        if (xSessionId == null) {
            throw new ApiException("Missing the required parameter 'xSessionId' when calling closeWebSocketStream(Async)");
        }
        
        // verify the required parameter 'xTransactionId' is set
        if (xTransactionId == null) {
            throw new ApiException("Missing the required parameter 'xTransactionId' when calling closeWebSocketStream(Async)");
        }
        

        com.squareup.okhttp.Call call = closeWebSocketStreamCall(xSessionId, xTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Close transaction
     * 
     * @param xSessionId Session identifier (required)
     * @param xTransactionId Transaction Id (required)
     * @return CloseTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloseTransactionResponse closeWebSocketStream(UUID xSessionId, UUID xTransactionId) throws ApiException {
        ApiResponse<CloseTransactionResponse> resp = closeWebSocketStreamWithHttpInfo(xSessionId, xTransactionId);
        return resp.getData();
    }

    /**
     * Close transaction
     * 
     * @param xSessionId Session identifier (required)
     * @param xTransactionId Transaction Id (required)
     * @return ApiResponse&lt;CloseTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloseTransactionResponse> closeWebSocketStreamWithHttpInfo(UUID xSessionId, UUID xTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = closeWebSocketStreamValidateBeforeCall(xSessionId, xTransactionId, null, null);
        Type localVarReturnType = new TypeToken<CloseTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Close transaction (asynchronously)
     * 
     * @param xSessionId Session identifier (required)
     * @param xTransactionId Transaction Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call closeWebSocketStreamAsync(UUID xSessionId, UUID xTransactionId, final ApiCallback<CloseTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = closeWebSocketStreamValidateBeforeCall(xSessionId, xTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloseTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
